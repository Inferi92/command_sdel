#!/bin/bash

# Initialize variables with default values
compress=false
recursive=false
threshold_time=""
threshold_size=""
filename=""
update=false
help=false
trash_dir="$HOME/.LIXO"
help_msg="Usage: sdel [file1, file2, ...] [-r dir] [-t num] [-s num] [-u] [-h]
Deletes files safely by compressing them if they are not already compressed and moving them to the trash directory ~/.LIXO. 
Only one option is allowed per invocation.

Arguments:
  file1, file2, ...  Files to be deleted.
  -r dir             Deletes files recursively in the specified directory.
  -t num             Deletes files in ~/.LIXO directory that are older than the specified number of hours.
  -s num             Deletes files in ~/.LIXO directory that are larger than the specified size in KBytes.
  -u                 Prints the size of the largest file in the ~/.LIXO directory.
  -h                 Shows this help message.
  
Examples:
  sdel file1 file2 - Compresses and moves file1 and file2 to ~/.LIXO directory.
  sdel -r directory - Deletes files recursively in the specified directory.
  sdel file1 -t 48 - Deletes files in ~/.LIXO directory that are older than 48 hours.
  sdel -s 100 - Deletes files in ~/.LIXO directory that are larger than 100 KBytes.
  sdel -u file1 - Prints the size of the largest file in the ~/.LIXO directory."
usage_msg="Usage: sdel [file1 file2 ...] [-r dir] [-t num] [-s num] [-u] [-h]"

# Parse command line arguments
#while [[ $# -gt 0 ]]
while [[ $# -gt 0 ]]
do
  case $1 in
    -r)
      if [[ -z $2 ]]; then
        echo "Error: The -r option requires a directory argument."
        echo "$usage_msg" >&2
        exit 1
      fi
      recursive=true
      dir="$2"
      shift 2
      ;;
    -t)
      if [[ -z $2 ]]; then
        echo "Error: The -t option requires a integer argument."
        echo "$usage_msg" >&2
        exit 1
      fi
      threshold_time="$2"
      shift 2
      ;;
    -s)
      if [[ -z $2 ]]; then
        echo "Error: The -u option requires a integer argument."
        echo "$usage_msg" >&2
        exit 1
      fi
      threshold_size="$2"
      shift 2
      ;;
    -u)
      update=true
      shift
      ;;
    -h)
      help=true
      shift
      ;;
    \?)
      echo "Invalid option: - $1" >&2
      echo "$usage_msg" >&2
      exit 1
      ;;
    :)
      echo "Option - $1 requires an argument." >&2
      exit 1
      ;;
    *)
      compress=true
      files+=("$1")
      shift
      ;;

      # echo "Invalid option: $1" >&2
      # echo "$usage_msg" >&2
      # exit 1
      # ;;
      # compress=true
      # files+=("$1")
      # shift
      # ;;
  esac
done

echo "compress: $compress"
echo "recursive: $recursive"
echo "update: $update"
echo "help: $help"

# Check for syntax errors
if [[ $compress = true && $recursive = true ]]; then
  echo "Error: Cannot use both file names and -r option"
  echo $usage_msg >&2
  exit 1
fi

if [[ ($threshold_time != "" || $threshold_size != "") && $update = true ]]; then
  echo "Error: Cannot use both -u and -t/-s options"
  echo $usage_msg >&2
  exit 1
fi

# If help option is provided, print usage and exit
if [[ $help = true ]]; then
  echo "$help_msg"
  exit 0
fi

# Check for multiple options
if [[ ($compress = true && ${#files[@]} -gt 1) ]]; then
  echo "Error: Only one option allowed per invocation"
  echo $usage_msg >&2
  exit 1
fi

# Compress files and move to trash directory
if [[ $compress = true ]]; then
  # Check if files are already compressed
  for file in "${files[@]}"; do
    if [[ $file != *.gz ]]; then
      gzip "$file"
      file="$file.gz"
      echo "$(date): compressed $file." >> "$HOME/.sdel.log"
    fi
      echo "$(date): moved $file to $trash_dir." >> "$HOME/.sdel.log"
  done
fi

# Recursively compress files in directory and move to trash directory
if [[ $recursive = true ]]; then
  # Check if directory exists
  if [[ ! -d $dir ]]; then
    echo "Error: $dir is not a directory" >&2
    exit 1
  fi

  # Compress files recursively and move to trash directory
  find "$dir" -type f | while read -r file; do
    if [[ $file != *.gz ]]; then
      gzip "$file"
      file="$file.gz"
      echo "$(date): compressed $file." >> "$HOME/.sdel.log"
    fi
      mv "$file" "$trash_dir"
      echo "$(date): moved $file to $trash_dir." >> "$HOME/.sdel.log"
  done
fi

# Delete files older than threshold time
if [[ $threshold_time != "" ]]; then
  find "$trash_dir" -type f -mtime +"$threshold_time" | while read -r file; do
    rm "$file"
    echo "$(date): deleted $file because it was older than $threshold_time H." >> "$HOME/.sdel.log"
  done
fi

# Delete files larger than threshold size
if [[ $threshold_size != "" ]]; then
  find "$trash_dir" -type f -size +"$threshold_size"k | while read -r file; do
    rm "$file"
    echo "$(date): deleted $file because it was larger than $threshold_size KBytes." >> "$HOME/.sdel.log"
  done
fi

# Print size of largest file in trash directory
if [[ $update = true ]]; then
  largest_file=$(find "$trash_dir" -type f -printf "%s %p\n" | sort -nr | head -n1)
  if [[ -n $largest_file ]]; then
    echo "The size of the largest file in the trash directory is:"
    find "$trash_dir" -type f -printf "%s\n" | sort -nr | head -n 1
    exit 0
  else
    echo "The trash directory is empty."
  fi
fi